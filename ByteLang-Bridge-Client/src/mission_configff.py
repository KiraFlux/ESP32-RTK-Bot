#!/usr/bin/env python3
"""
Конфигурационный файл для миссии обнаружения замыканий
Все настраиваемые параметры в одном месте
"""

# =============================================================================
# ПАРАМЕТРЫ ПОЛИГОНА
# =============================================================================

# Размеры полигона (мм) - по карте PGM
FIELD_WIDTH = 4000
FIELD_HEIGHT = 4000

# Размеры ячеек (мм) 
CELL_WIDTH = 800
CELL_HEIGHT = 800

# Количество ванн
TOTAL_BATHS = 8

# Размеры робота (мм)
ROBOT_WIDTH = 250  # 25 см

# Размеры ванны (мм)
BATH_WIDTH = 400   # 40 см ширина
BATH_LENGTH = 350  # расчетная длина ванны

# Брусья в ванне
TOTAL_BARS = 12    # 12 брусьев (6 пар)
BAR_WIDTH = 25     # 2.5 см каждый брус
BAR_SPACING = 25   # 2.5 см между брусьями
SEPARATOR_WIDTH = 50  # 5 см разделитель посередине
PAIRS_COUNT = 6    # 6 пар брусьев

# Расстояния на полигоне (мм)
START_TO_WALL = 2200      # от старта до стенки 220 см
BETWEEN_BATHS = 1000      # между ваннами ~100 см
WALL_DISTANCE = 400       # от центра ячейки до стенки 40 см
BATH_SAFETY_MARGIN = 50   # отступ от края ванны 5 см

# =============================================================================
# ПАРАМЕТРЫ ДВИЖЕНИЯ
# =============================================================================

# Скорости движения
DEFAULT_SPEED = 0.5  # Базовая скорость
PRECISION_SPEED = 0.3  # Медленная скорость для точных маневров
FAST_SPEED = 0.8  # Быстрая скорость для переходов

# Расстояния (мм)
BATH_TO_BATH_DISTANCE = 800  # Расстояние между соседними ваннами
ROW_TO_ROW_DISTANCE = 800   # Расстояние между рядами ванн
START_TO_BATHS_DISTANCE = 1000  # От стартовой позиции до ванн

# Углы поворотов (в оборотах)
QUARTER_TURN = 0.25  # 90 градусов
HALF_TURN = 0.5      # 180 градусов
FULL_TURN = 1.0      # 360 градусов

# =============================================================================
# ПАРАМЕТРЫ ДАТЧИКОВ
# =============================================================================

# Магнитометр
MAGNETIC_FIELD_THRESHOLD = 5  # Порог для обнаружения короткого замыкания
MAGNETIC_SAMPLES_COUNT = 3    # Количество измерений для усреднения
MAGNETIC_SAMPLE_DELAY = 0.1   # Задержка между измерениями (сек)

# Стабилизация перед измерением
STABILIZATION_TIME = 1.0  # Время остановки перед измерением (сек)

# =============================================================================
# ПАРАМЕТРЫ КАМЕРЫ И ARUCO
# =============================================================================

# Настройки камеры
CAMERA_INDEX = 1  # Индекс USB камеры
CAMERA_WARMUP_TIME = 2.0  # Время прогрева камеры (сек)

# ArUco параметры
ARUCO_DICT_TYPE = "DICT_5X5_250"  # Тип словаря ArUco маркеров
ARUCO_SCAN_TIME = 5.0  # Время сканирования маркеров (сек)

# Ожидаемые ID маркеров кнопок (1-8 для ванн)
EXPECTED_MARKER_IDS = [1, 2, 3, 4, 5, 6, 7, 8]

# =============================================================================
# КООРДИНАТЫ КЛЮЧЕВЫХ ТОЧЕК
# =============================================================================

# Стартовая/финишная позиция (мм)
START_POSITION = (0, 0)

# Позиции ванн (мм) - нужно калибровать под реальный полигон
BATH_POSITIONS = {
    1: (800, 800),
    2: (1600, 800), 
    3: (2400, 800),
    4: (3200, 800),
    5: (3200, 1600),
    6: (2400, 1600),
    7: (1600, 1600),
    8: (800, 1600)
}

# Область с кнопками
BUTTON_AREA_CENTER = (0, 0)  # Центр области с кнопками

# Кнопки в стартовой зоне (мм)
BUTTON_DIAMETER = 100     # диаметр кнопки 10 см
BUTTON_SPACING = 100      # между центрами кнопок 10 см
BUTTON_ROWS = 2           # 2 ряда кнопок
BUTTONS_PER_ROW = 4       # 4 кнопки в ряду

# Позиции кнопок относительно центра стартовой области (мм)
BUTTON_POSITIONS = {
    # Нижний ряд (доступен роботу снизу): кнопки 5,6,7,8
    5: (-150, 100),   # левая кнопка нижнего ряда
    6: (-50, 100),    # вторая кнопка нижнего ряда  
    7: (50, 100),     # третья кнопка нижнего ряда
    8: (150, 100),    # правая кнопка нижнего ряда
    # Верхний ряд (на стенке): кнопки 1,2,3,4 - недоступны снизу
    1: (-150, -100),  
    2: (-50, -100),   
    3: (50, -100),    
    4: (150, -100)    
}

# =============================================================================
# МАРШРУТЫ ПАТРУЛИРОВАНИЯ
# =============================================================================

# Последовательность обхода ванн
PATROL_SEQUENCE = [1, 2, 3, 4, 5, 6, 7, 8]

# Маршрут между ваннами (примерный)
INTER_BATH_ROUTES = {
    (1, 2): [("go_dist", BATH_TO_BATH_DISTANCE)],
    (2, 3): [("go_dist", BATH_TO_BATH_DISTANCE)], 
    (3, 4): [("go_dist", BATH_TO_BATH_DISTANCE)],
    (4, 5): [("turn", HALF_TURN), ("go_dist", ROW_TO_ROW_DISTANCE), ("turn", HALF_TURN)],
    (5, 6): [("go_dist", -BATH_TO_BATH_DISTANCE)],  # Движение назад
    (6, 7): [("go_dist", -BATH_TO_BATH_DISTANCE)],
    (7, 8): [("go_dist", -BATH_TO_BATH_DISTANCE)]
}

# =============================================================================
# ТАЙМАУТЫ И ОГРАНИЧЕНИЯ
# =============================================================================

# Таймауты операций (сек)
MOVEMENT_TIMEOUT = 30.0      # Максимальное время на движение
MEASUREMENT_TIMEOUT = 10.0   # Максимальное время на измерение
ARUCO_SCAN_TIMEOUT = 10.0   # Максимальное время на поиск маркеров

# Количество попыток
MAX_MOVEMENT_RETRIES = 3     # Повторы движения при ошибке
MAX_MEASUREMENT_RETRIES = 3  # Повторы измерения при ошибке
MAX_ARUCO_RETRIES = 3       # Повторы поиска маркеров

# =============================================================================
# ПАРАМЕТРЫ ОТЛАДКИ И ЛОГИРОВАНИЯ
# =============================================================================

# Уровень детализации логов
LOG_LEVEL = "INFO"  # DEBUG, INFO, WARNING, ERROR

# Сохранение данных
SAVE_MISSION_LOG = True
SAVE_SENSOR_DATA = True
SAVE_IMAGES = False  # Сохранять ли кадры с камеры

# Директории для сохранения
LOG_DIRECTORY = "./logs"
DATA_DIRECTORY = "./mission_data"
IMAGE_DIRECTORY = "./images"

# =============================================================================
# ПАРАМЕТРЫ БЕЗОПАСНОСТИ
# =============================================================================

# Максимальное время выполнения миссии (мин)
MAX_MISSION_TIME = 60

# Автоматическая остановка при критических ошибках
AUTO_STOP_ON_ERROR = True

# =============================================================================
# ESP32 СОЕДИНЕНИЕ
# =============================================================================

# Параметры последовательного соединения
SERIAL_PORT = "/dev/ttyUSB0"  # Порт ESP32 (Linux)
# SERIAL_PORT = "COM3"        # Порт ESP32 (Windows)
SERIAL_BAUDRATE = 115200
SERIAL_TIMEOUT = 1.0

# Повторное подключение
AUTO_RECONNECT = True
RECONNECT_DELAY = 2.0  # Задержка между попытками переподключения (сек)

# =============================================================================
# КАЛИБРОВОЧНЫЕ КОЭФФИЦИЕНТЫ
# =============================================================================

# Коррекция движения (нужно настроить экспериментально)
DISTANCE_CORRECTION_FACTOR = 1.0  # Коэффициент коррекции расстояния
ROTATION_CORRECTION_FACTOR = 1.0  # Коэффициент коррекции поворота

# Коррекция датчиков
MAGNETIC_OFFSET = 0  # Смещение показаний магнитометра
MAGNETIC_SCALE = 1.0  # Масштабирование показаний

# =============================================================================
# ФУНКЦИИ ДЛЯ РАБОТЫ С КОНФИГУРАЦИЕЙ
# =============================================================================

def get_bath_position(bath_number: int) -> tuple:
    """Получить позицию ванны по номеру"""
    return BATH_POSITIONS.get(bath_number, (0, 0))

def get_button_position(button_number: int) -> tuple:
    """Получить позицию кнопки по номеру"""
    if button_number in BUTTON_POSITIONS:
        rel_x, rel_y = BUTTON_POSITIONS[button_number]
        abs_x = BUTTON_AREA_CENTER[0] + rel_x
        abs_y = BUTTON_AREA_CENTER[1] + rel_y
        return (abs_x, abs_y)
    return (0, 0)

def get_route_between_baths(from_bath: int, to_bath: int) -> list:
    """Получить маршрут между ваннами"""
    return INTER_BATH_ROUTES.get((from_bath, to_bath), [])

def validate_config():
    """Проверка корректности конфигурации"""
    errors = []
    
    # Проверка количества ванн и позиций
    if len(BATH_POSITIONS) != TOTAL_BATHS:
        errors.append(f"Количество позиций ванн ({len(BATH_POSITIONS)}) не соответствует TOTAL_BATHS ({TOTAL_BATHS})")
    
    # Проверка кнопок
    if len(BUTTON_POSITIONS) != TOTAL_BATHS:
        errors.append(f"Количество позиций кнопок ({len(BUTTON_POSITIONS)}) не соответствует TOTAL_BATHS ({TOTAL_BATHS})")
    
    # Проверка маркеров
    if len(EXPECTED_MARKER_IDS) != TOTAL_BATHS:
        errors.append(f"Количество ожидаемых маркеров ({len(EXPECTED_MARKER_IDS)}) не соответствует TOTAL_BATHS ({TOTAL_BATHS})")
    
    # Проверка последовательности патрулирования
    if len(PATROL_SEQUENCE) != TOTAL_BATHS:
        errors.append(f"Последовательность патрулирования содержит {len(PATROL_SEQUENCE)} ванн вместо {TOTAL_BATHS}")
    
    # Проверка пороговых значений
    if MAGNETIC_FIELD_THRESHOLD <= 0:
        errors.append("MAGNETIC_FIELD_THRESHOLD должен быть больше 0")
    
    return errors

def print_config_summary():
    """Печать краткой сводки конфигурации"""
    print("=== КОНФИГУРАЦИЯ МИССИИ ===")
    print(f"Полигон: {FIELD_WIDTH}x{FIELD_HEIGHT} мм")
    print(f"Ванн: {TOTAL_BATHS}")
    print(f"Порог магнитного поля: {MAGNETIC_FIELD_THRESHOLD}")
    print(f"Камера: индекс {CAMERA_INDEX}")
    print(f"ArUco: {ARUCO_DICT_TYPE}")
    print(f"Последовательность: {PATROL_SEQUENCE}")
    
    # Проверка конфигурации
    errors = validate_config()
    if errors:
        print("\n⚠️  ОШИБКИ КОНФИГУРАЦИИ:")
        for error in errors:
            print(f"  - {error}")
    else:
        print("\n✅ Конфигурация корректна")

# =============================================================================
# ЭКСПОРТИРУЕМЫЕ ОБЪЕКТЫ
# =============================================================================

__all__ = [
    # Основные параметры
    'TOTAL_BATHS', 'MAGNETIC_FIELD_THRESHOLD', 'CAMERA_INDEX', 'ARUCO_DICT_TYPE',
    
    # Позиции и маршруты  
    'START_POSITION', 'BATH_POSITIONS', 'BUTTON_POSITIONS', 'PATROL_SEQUENCE',
    
    # Функции
    'get_bath_position', 'get_button_position', 'get_route_between_baths',
    'validate_config', 'print_config_summary'
]

if __name__ == "__main__":
    print_config_summary()
